---
openapi: 3.0.0
servers:
  - url: 'https://example.domain/'
info:
  title: Fence OpenAPI Specification
  version: 0.1.0
  description: >-
    Access management for CDIS data commons. Code is available on
    [GitHub](https://github.com/uc-cdis/fence).
  termsOfService: 'http://cdis.uchicago.edu/terms/'
  contact:
    email: cdis@uchicago.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: oauth2
    description: Authorization and token management
  - name: user
    description: User information
  - name: data
    description: Generate pre-signed URLs
  - name: credentials
    description: Access credentials
  - name: credentials/google
    description: Google Credentials
  - name: credentials/cdis
    description: Deprecated! Use credentials/api
  - name: credentials/api
    description: API Credentials
  - name: 'credentials/{provider}'
    description: Other provider credentials
  - name: link
    description: Link access identities
  - name: google
    description: Google functionality
  - name: keys
    description: Get public keys used to validate JWTs issued by fence
paths:
  /oauth2/authorize:
    get:
      tags:
        - oauth2
      summary: Perform OAuth2 authorization
      description: >-
        Obtain an authorization grant through the OAuth2 protocol. To handle
        this request, render a page for the user to confirm the OAuth2 grant
        (through e.g. Google). Redirect user to `redirect_uri` with an added
        `code` parameter obtained from the authorization provider.
      operationId: authorize
      parameters:
        - name: client_id
          required: true
          in: query
          description: 'The client''s ID, issued by authorization server'
          schema:
            type: string
        - name: response_type
          required: true
          in: query
          description: >-
            For an authorization request using the access code flow, the
            response type must be "code". If this is missing from the request
            then the authorization server must return an error.
          schema:
            type: string
        - name: redirect_uri
          required: true
          in: query
          description: Page to redirect to after access has been granted
          schema:
            type: string
        - name: scope
          required: false
          in: query
          description: Requested authorization scope
          schema:
            type: string
      responses:
        '200':
          description: successful operation
    post:
      tags:
        - oauth2
      summary: Perform OAuth2 authorization
      description: >-
        Obtain an authorization grant through the OAuth2 protocol. To handle
        this request, render a page for the user to confirm the OAuth2 grant
        (through e.g. Google). Redirect user to `redirect_uri` with an added
        `code` parameter obtained from the authorization provider. A POST will
        not render a page for the user; this implementation checks the `confirm`
        value in the request.
      operationId: authorize_post
      responses:
        '200':
          description: successful operation
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                client_id:
                  description: 'The client''s ID, issued by authorization server'
                  type: string
                response_type:
                  description: >-
                    For an authorization request using the access code flow, the
                    response type must be "code". If this is missing from the
                    request then the authorization server must return an error.
                  type: string
                  enum:
                    - code
                    - token
                redirect_uri:
                  description: Page to redirect to after access has been granted
                  type: string
                confirm:
                  description: whether to confirm the OAuth2 grant (should be 'yes')
                  type: string
                scope:
                  description: Requested authorization scope
                  type: string
              required:
                - client_id
                - response_type
                - redirect_uri
  /oauth2/token:
    post:
      tags:
        - oauth2
      summary: Exchange code for or refresh the access token.
      description: >-
        Exchange the `code` obtained from OAuth2 for an access token, or refresh
        the access token using a refresh token.
      operationId: token
      responses:
        '200':
          description: successful operation
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  description: >-
                    Value MUST be `"authorization_code"` (which is the
                    authorization flow used in this implementation)
                  type: string
                code:
                  description: >-
                    The authorization code returned from the OAuth2
                    authorization request
                  type: string
                redirect_uri:
                  description: >-
                    Must be identical to the `"redirect_uri"` included in the
                    original authorization request
                  type: string
                client_id:
                  type: string
              required:
                - grant_type
                - code
                - redirect_uri
                - client_id
  /oauth2/revoke:
    post:
      tags:
        - oauth2
      summary: Revoke a refresh token
      description: Revoke a refresh (not access) token granted to a user.
      operationId: revoke
      responses:
        '200':
          description: 'successful operation, OR invalid token submitted'
        '400':
          description: >-
            invalid token provided: not a refresh token, or token was missing a
            claim, or token could not be validated
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  description: Refresh token that the user wants to revoke
                  type: string
              required:
                - token
  /jwt/keys:
    get:
      tags:
        - keys
      summary: >-
        Return the public keys which can be used to validate JWTs issued and
        signed by fence
      operationId: getKeys
      responses:
        '200':
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PublicKeys'
  /user:
    get:
      tags:
        - user
      summary: Return info about the current user
      security:
        - OAuth2:
            - user
      operationId: getUserInfo
      responses:
        '200':
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserInfo'
  '/data/download/{file_id}':
    get:
      tags:
        - data
      summary: Create a presigned URL for data download given a file_id
      description: Allow users to get a pre-signed URL for a data file.
      security:
        - OAuth2:
            - user
      operationId: downloadPresignedURL
      parameters:
        - name: file_id
          required: true
          in: path
          description: data UUID
          schema:
            type: string
        - name: protocol
          required: false
          in: query
          description: >-
            a protocol provided by storage provider, currently supports 'http'
            and 's3' protocols
          schema:
            type: string
            enum:
              - http
              - s3
        - name: expires_in
          required: false
          in: query
          description: >-
            the time (in seconds) in which return url is valid. Must be less
            than the configured maximum (default is 3600). If it's greater,
            the configured maximum will be used.
          schema:
            type: integer
        - name: redirect
          required: false
          in: query
          description: >-
            if set, then a redirect to the presigned url will be sent.
            Otherwise, json data with the url is returned.
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PresignedURL'
        '400':
          description: 'Invalid input: UUID not found or invalid location'
  '/data/upload/{file_id}':
    get:
      tags:
        - data
      summary: Create a presigned URL for data upload specified by file_id
      description: >-
        Allow users to get a pre-signed URL to upload data given the location of
        preference.
      security:
        - OAuth2:
            - user
      operationId: uploadPresignedURL
      parameters:
        - name: file_id
          required: true
          in: path
          description: data UUID
          schema:
            type: string
        - name: protocol
          required: false
          in: query
          description: >-
            a protocol provided by storage provider, currently supports 'http'
            and 's3' protocols
          schema:
            type: string
            enum:
              - http
              - s3
        - name: expires_in
          required: false
          in: query
          description: >-
            the time (in seconds) in which return url is valid. Must be less
            than the configured maximum (default is 3600). If it's greater,
            the configured maximum will be used.
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PresignedURL'
        '400':
          description: 'Invalid input: UUID not found or invalid location'
  /credentials:
    get:
      tags:
        - credentials
      summary: List credential resources
      description: List different resources user can have credentials
      security:
        - OAuth2:
            - user
      operationId: listSources
      responses:
        '200':
          description: successful operation
  /credentials/google:
    get:
      tags:
        - credentials/google
      summary: List access keys
      description: List all the Google access keys for the current user
      security:
        - OAuth2:
            - user
      operationId: listGoogleKeypairs
      responses:
        '200':
          description: Google keys info response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GoogleKeys'
    post:
      tags:
        - credentials/google
      summary: Receive temporary access key
      description: >-
        Get a new temporary Google access key for the current user. The response
        from this represents exactly what should be placed in a JSON credentials
        file to pass to Google's APIs.
      security:
        - OAuth2:
            - user
      operationId: getGoogleKeypair
      responses:
        '200':
          description: Temporary private Google key in Google Credentials File format
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GoogleKey'
  '/credentials/google/{access_key}':
    delete:
      tags:
        - credentials/google
      summary: Delete access key
      description: Delete a Google access key for the current user
      security:
        - OAuth2:
            - user
      operationId: deleteGoogleKeypair
      parameters:
        - name: access_key
          required: true
          in: path
          description: Google Key ID
          schema:
            type: string
      responses:
        '204':
          description: successful deletion
        '404':
          description: >-
            Couldn't find key or service account for current user, unable to
            delete given key
  /credentials/cdis:
    get:
      deprecated: true
      tags:
        - credentials/cdis
      summary: List API keys for user
      description: List all the API keys for the current user
      security:
        - OAuth2:
            - user
      operationId: listCDISKeypairs
      responses:
        '200':
          description: List of API keys issued to user and their expiration
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/APIKeys'
    post:
      deprecated: true
      tags:
        - credentials/cdis
      summary: Receive API key
      description: >-
        Get a new API key for the current user. API keys can be used to retrieve
        access tokens which will allow for authed communication to our API.
      security:
        - OAuth2:
            - user
      operationId: getCDISKeypair
      responses:
        '200':
          description: API key id and actual key
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NewAPIKey'
  '/credentials/cdis/{key_id}':
    delete:
      deprecated: true
      tags:
        - credentials/cdis
      summary: Delete user API key
      description: Delete a API access key for the current user
      security:
        - OAuth2:
            - user
      operationId: deleteCDISKeypair
      parameters:
        - name: key_id
          required: true
          in: path
          description: API Key key_id/jti
          schema:
            type: string
      responses:
        '204':
          description: successful deletion
        '404':
          description: 'Couldn''t find key for current user, unable to delete given key'
  /credentials/cdis/access_token:
    post:
      deprecated: true
      tags:
        - credentials/cdis
      summary: Receive access token when given API key
      description: >-
        Get a new temporary access token for the current user by providing a
        valid API key.
      security:
        - OAuth2:
            - user
      operationId: getCDISAccessToken
      responses:
        '200':
          description: Access token
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
      requestBody:
        $ref: '#/components/requestBodies/APIKey'
  /credentials/api:
    get:
      tags:
        - credentials/api
      summary: List API keys for user
      description: List all the API keys for the current user
      security:
        - OAuth2:
            - user
      operationId: listAPIKeypairs
      responses:
        '200':
          description: List of API keys issued to user and their expiration
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/APIKeys'
    post:
      tags:
        - credentials/api
      summary: Receive API key
      description: >-
        Get a new API key for the current user. API keys can be used to retrieve
        access tokens which will allow for authed communication to our API.
      security:
        - OAuth2:
            - user
      operationId: getAPIKeypair
      responses:
        '200':
          description: API key id and actual key
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NewAPIKey'
  '/credentials/api/{key_id}':
    delete:
      tags:
        - credentials/api
      summary: Delete user API key
      description: Delete a API access key for the current user
      security:
        - OAuth2:
            - user
      operationId: deleteAPIKeypair
      parameters:
        - name: key_id
          required: true
          in: path
          description: API Key key_id/jti
          schema:
            type: string
      responses:
        '204':
          description: successful deletion
        '404':
          description: 'Couldn''t find key for current user, unable to delete given key'
  /credentials/api/access_token:
    post:
      tags:
        - credentials/api
      summary: Receive access token when given API key
      description: >-
        Get a new temporary access token for the current user by providing a
        valid API key.
      security:
        - OAuth2:
            - user
      operationId: getAccessToken
      responses:
        '200':
          description: Access token
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
      requestBody:
        $ref: '#/components/requestBodies/APIKey'
  '/credentials/{provider}':
    get:
      tags:
        - 'credentials/{provider}'
      summary: List access keys
      description: List all the access keys for the current user
      parameters:
        - name: provider
          required: true
          in: path
          description: Storage provider to obtain creds for
          schema:
            type: string
      security:
        - OAuth2:
            - user
      operationId: listGenericKeypairs
      responses:
        '200':
          description: Generic keys info response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GenericKeys'
    post:
      tags:
        - 'credentials/{provider}'
      summary: Receive access key
      description: Get a new access key for the current user for the given provider
      parameters:
        - name: provider
          required: true
          in: path
          description: Storage provider to obtain creds for
          schema:
            type: string
      security:
        - OAuth2:
            - user
      operationId: getGenericKeypair
      responses:
        '200':
          description: generic keypair for provider
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GenericKey'
  '/credentials/{provider}/{access_key}':
    delete:
      tags:
        - 'credentials/{provider}'
      summary: Delete access key
      description: Delete an access key for the current user
      security:
        - OAuth2:
            - user
      operationId: deleteGenericKeypair
      parameters:
        - name: provider
          required: true
          in: path
          description: Provider of credentials such as API, or Google
          schema:
            type: string
        - name: access_key
          required: true
          in: path
          description: Generic Key ID
          schema:
            type: string
      responses:
        '204':
          description: successful deletion
        '404':
          description: 'Couldn''t find key, unable to delete given key'
  /link/google (IN PROGRESS):
    get:
      tags:
        - link
      summary: Link Google identity to user
      parameters:
        - name: redirect
          required: true
          in: query
          description: Page to redirect to after account linking
          schema:
            type: string
      description: >
        Link a Google identity to a User (AuthN using Google Oauth2 flow).
        Google identity will be associated with a user and added to a
        proxy group for that user. The user's proxy group will be given access
        to data via Google's IAM. `redirect` will be stored in the session
        to follow after linking.

        ---

        If AuthN is successful with Google, eventually will redirect to
        `/link/google/callback`, where the actual account linkage occur.

        > *See `/link/google/callback` endpoint for details about error
        handling.*
      operationId: linkCloudIdentityStart2
      responses:
        '302':
          description: redirect to Oauth2 flow with Google to AuthN user
    patch:
      tags:
        - link
      summary: Extend Google identity's access expiration
      description: >-
        Extend previously linked Google identity's access expiration from the
        user's proxy group (thus extending its access to data). This can only be
        done if the user has ALREADY linked their Google account before.
      operationId: extendCloudIdentityExpiration
      responses:
        '200':
          description: successfully extended access
        '404':
          description: No linked Google account found for user
    delete:
      tags:
        - link
      summary: Unlink a Google identity from a user
      description: Remove link between a user and a Google identity.
      operationId: unlinkCloudIdentity
      responses:
        '200':
          description: Google identity unlinked from user
        '400':
          description: >-
            Failure with Google's API to remove account from proxy group. See
            response for details
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GoogleLinkingError'
        '404':
          description: No linked Google account found for user
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GoogleLinkingError'
  /link/google/callback (IN PROGRESS):
    get:
      tags:
        - link
      summary: Google's callback for linking Google identity
      description: >
        Linking of Google identity to user after successful Oauth2
        flow with Google. Use code to retrieve user info from Google.

        Will return to session stored redirect with any error information in
        query params. The error params are `error` and `error_description`.

        ---

        Possible Error Types (for `error` param)
          * `g_acnt_link_error`
            * Issue with the linkage between User and their Google account
          * `g_acnt_auth_failure`
            * Issue with Oauth2 flow to AuthN user's Google account
          * `g_acnt_access_error`
            * Issue with providing access to Google account by putting in user's proxy group

        For details about the error, check the `error_description` param.
      parameters:
        - name: code
          required: true
          in: query
          description: The authorization code returned from the OAuth2
            authorization request
          schema:
            type: string
      operationId: linkCloudIdentity
      responses:
        '302':
          description: redirect to session-stored redirect value
  /google/service_accounts/ (PLANNING):
    post:
      tags:
        - google
      summary: Register a Google Service Account
      description: >-
        Register a Google Cloud Project's service account to allow access to
        controlled data. If there are issues, will provide details for what went
        wrong.
      operationId: registerGoogleServiceAccount
      responses:
        '201':
          description: >-
            success, registered service account. Item location specified in
            Location of the response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GoogleServiceAccount'
        '400':
          description: 'failure, trying to register service account resulted in errors'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGoogleServiceAccount'
        description: ServiceAccount object to register
        required: true
  /google/service_accounts/_dry_run (PLANNING):
    post:
      tags:
        - google
      summary: Dry run to attempt to register a Google Service Account
      description: >-
        Attempt to register a service account WITHOUT actually doing so. Will
        provide detailed errors for what went wrong.
      operationId: registerGoogleServiceAccountDryRun
      responses:
        '200':
          description: 'success, registering service account is possible'
        '400':
          description: 'failure, registering service account would result in errors'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGoogleServiceAccount'
        description: ServiceAccount object to register
  /google/service_accounts/monitor (PLANNING):
    get:
      tags:
        - google
      summary: >-
        Return the service account used for monitoring user's Google Cloud
        Projects
      description: |
        This account is used to monitor and validate access to data
        for registered service accounts for the project.

        >NOTE: This service account must be given editor role on a Google
        Project for service account registration to succeed. If it is ever
        removed, all access to data will be removed.
      operationId: adminGoogleServiceAccount
      responses:
        '200':
          description: Monitoring service account information
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AdminGoogleServiceAccount'
  '/google/service_accounts/{id} (PLANNING)':
    get:
      tags:
        - google
      summary: Get a list of Google Service Accounts
      description: |
        Get a list of service accounts for the given Google Cloud Project IDs.
        > **NOTE: This will only provide service account information for
        Google Cloud Projects if the current user is a member of those
        projects**
      parameters:
        - name: id
          required: true
          in: path
          description: |
            Google Cloud Project IDs to get service accounts for.
            Use a comma-separated list: `project_a,project_b,project_c`
          schema:
            type: string
      operationId: listGoogleServiceAccount
      responses:
        '200':
          description: List of service accounts for specified projects
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GoogleServiceAccounts'
        '403':
          description: User is not a member on all the provided project ids
    delete:
      tags:
        - google
      summary: Delete a specific Google Service Account
      description: Delete a service account
      operationId: deleteSpecficGoogleServiceAccount
      parameters:
        - in: path
          name: id
          description: ServiceAccount idenitifer
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'success, deleted service account'
        '400':
          description: 'failure, could not service account'
        '403':
          description: 'unauthorized, user cannot delete this service account'
    patch:
      tags:
        - google
      summary: Update a Google Service Account
      description: >-
        Update a Google Cloud Project's service account to change access to
        controlled data and/or extend access to data. This will extend the
        service accounts access to data. It will also modify access if a patch
        document is provided with new access.

        > WARNING: Provided patch document will *fully replace* previous data.
        It will NOT extend previous data by provided values, it will FULLY
        REPLACE the data with what's provided.
      operationId: updateGoogleServiceAccount
      parameters:
        - in: path
          name: id
          description: ServiceAccount idenitifer
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'success, updated service account access'
        '400':
          description: 'failure, trying to update service account access resulted in errors'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleServiceAccountProjectAccess'
        description: ServiceAccount fields to update
  /.well-known/jwks:
    get:
      tags:
        - keys
      summary: Get JWK Set used by the application
      description: >-
        See [RFC 7517](https://tools.ietf.org/html/rfc7517) for detailed
        specification and an [example
        response](https://tools.ietf.org/html/rfc7517#appendix-A.1).
      responses:
        '200':
          description: JWKS response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JWKS'
components:
  requestBodies:
    APIKey:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIKey'
      description: API key
      required: true
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize
          tokenUrl: /oauth/token
          scopes:
            user: generic user access
  schemas:
    CredentialsSource:
      type: object
      required:
        - name
        - info
      properties:
        name:
          type: string
          description: >-
            User's Google identity email for whom service account should be
            associated with
        info:
          type: string
          description: Service account's email
    GoogleServiceAccount:
      type: object
      required:
        - service_account_email
        - google_project_id
        - project_access
      properties:
        id:
          type: integer
          description: unique identifier
        service_account_email:
          type: string
          description: Service account's email
        google_project_id:
          type: string
          description: Google Cloud Project ID of service account
        project_access:
          type: array
          items:
            type: string
          description: >-
            List of projects/datasets for which service account should be
            registered for
    AdminGoogleServiceAccount:
      type: object
      required:
        - service_account_email
      properties:
        service_account_email:
          type: string
          description: Service account's email
    NewGoogleServiceAccount:
      type: object
      required:
        - id
        - service_account_email
        - google_project_id
        - project_access
      properties:
        service_account_email:
          type: string
          description: Service account's email
        google_project_id:
          type: string
          description: Google Cloud Project ID of service account
        project_access:
          type: array
          items:
            type: string
          description: >-
            List of projects/datasets for which service account should be
            registered for
    GoogleServiceAccounts:
      type: object
      properties:
        service_accounts:
          type: array
          description: List of GoogleServiceAccounts
          items:
            $ref: '#/components/schemas/GoogleServiceAccount'
    GoogleServiceAccountProjectAccess:
      type: object
      required:
        - project_access
      properties:
        project_access:
          type: array
          items:
            type: string
          description: >-
            List of projects/datasets for which service account should be
            registered for
    GoogleKey:
      type: object
      description: >-
        decoded Google private key data from privateKeyData field
        https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountPrivateKeyType
      properties:
        type:
          type: string
        project_id:
          type: string
        private_key_id:
          type: string
        private_key:
          type: string
        client_email:
          type: string
        client_id:
          type: string
        auth_uri:
          type: string
        token_uri:
          type: string
        auth_provider_x509_cert_url:
          type: string
        client_x509_cert_url:
          type: string
      example:
        type: service_account
        project_id: project-id
        private_key_id: some_number
        private_key: '-----"BEGIN PRIVATE KEY-----\n..." =\n-----END "PRIVATE KEY-----\n"'
        client_email: api@project-id.iam.gserviceaccount.com
        client_id: ...
        auth_uri: 'https://accounts.google.com/o/oauth2/auth'
        token_uri: 'https://accounts.google.com/o/oauth2/token'
        auth_provider_x509_cert_url: 'https://www.googleapis.com/oauth2/v1/certs'
        client_x509_cert_url: >-
          https://www.googleapis.com/...api%40project-id.iam.gserviceaccount.com
    GoogleKeys:
      type: object
      properties:
        access_keys:
          type: array
          description: List of Google keys info
          items:
            type: object
            properties:
              keyAlgorithm:
                type: string
                description: Specifies the algorithm (and possibly key size) for the key.
              validBeforeTime:
                type: string
                description: The key can be used before this timestamp.
              name:
                type: string
                description: >-
                  The resource name of the service account key in the following
                  format
                  projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}.
              validAfterTime:
                type: string
                description: The key can be used after this timestamp.
      example:
        access_keys:
          - keyAlgorithm: KEY_ALG_RSA_2048
            validBeforeTime: '2028-03-11T18:27:41Z'
            name: >-
              projects/example/serviceAccounts/example@example.iam.gserviceaccount.com/keys/1234567890abcdefghijklmnop
            validAfterTime: '2018-03-14T18:27:41Z'
    APIKeys:
      type: object
      properties:
        jtis:
          type: array
          description: List of API keys issued to the user
          items:
            type: object
            properties:
              jti:
                type: string
                description: JWT ID / key id
              exp:
                type: integer
                description: >-
                  Key expiration (JSON number representing the number of seconds
                  from 1970-01-01T0:0:0Z as measured in UTC until the date/time)
      example:
        jtis:
          - jti: e9d58890-99b0-44f0-88bd-3ebc370b1329
            exp: 12345678
    APIKey:
      type: object
      properties:
        api_key:
          type: string
          description: JWT representing API key
      example:
        api_key: >-
          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.XbPfbIHMI6arZ3Y922BhjWgQzWXcXNrz0ogtVhfEd2o
    NewAPIKey:
      type: object
      properties:
        key_id:
          type: string
          description: Key identifier
        api_key:
          type: string
          description: JWT representing API key
      example:
        key_id: e9d58890-99b0-44f0-88bd-3ebc370b1329
        api_key: >-
          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.XbPfbIHMI6arZ3Y922BhjWgQzWXcXNrz0ogtVhfEd2o
    AccessToken:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
      example:
        access_token: >-
          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.XbPfbIHMI6arZ3Y922BhjWgQzWXcXNrz0ogtVhfEd2o
    GenericKey:
      type: object
      properties:
        access_key:
          type: string
          description: generic key
        secret_key:
          type: string
          description: generic secret key
      example:
        access_key: 8DGW9LyC0D4nByoWo6pp
        secret_key: 1lnkGScEH8Vr4EC6QnoqLK1PqRWPNqIBJkH6Vpgx
    GenericKeys:
      type: object
      properties:
        access_keys:
          type: array
          description: List of Generic keys
          items:
            type: object
            properties:
              access_key:
                type: string
                description: access key value
      example:
        access_keys:
          - access_key: 8DGW9LyC0D4nByoWo6pp
    JWKS:
      type: object
      properties:
        keys:
          type: array
          description: array of dictionaries of key information
          items:
            type: object
            properties:
              kty:
                type: string
                description: key type ("RSA" in our implementation)
              alg:
                type: string
                description: algorithm ("RS256" in our implementation)
              'n':
                type: string
                description: base64-encoded public key modulus
              e:
                type: string
                description: base64-encoded public key exponent
              kid:
                type: string
                description: key ID
      example:
        keys:
          - kty: RSA
            'n': >-
              0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw
            e: AQAB
            alg: RS256
            kid: '2011-04-29'
    UserInfo:
      type: object
      required:
        - pdc_id
        - username
        - resources_granted
        - project_access
        - certificates_uploaded
        - email
        - message
      properties:
        pdc_id:
          type: string
        username:
          type: string
          description: ''
        resources_granted:
          type: array
          items:
            type: string
        project_access:
          type: object
          additionalProperties:
            type: string
        certificates_uploaded:
          type: array
          items:
            type: string
        email:
          type: string
          description: ''
        message:
          type: string
    PresignedURL:
      type: object
      properties:
        url:
          type: string
          description: the presigned url issued to
    PublicKeys:
      type: object
      properties:
        keys:
          type: array
          description: array of single-entry dictionaries mapping from key id to public key
          items:
            type: array
            description: 'tuple of `(key_id, public_key)`'
            items:
              type: string
      example:
        keys:
          - - public_key_01
            - '-----BEGIN PUBLIC KEY----- ... -----END PUBLIC KEY-----'
    OAuthHTML:
      type: string
    GoogleLinkingError:
      type: object
      properties:
        error:
          type: string
          description: Error name/class
        error_description:
          type: string
          description: Description of what caused the error
      example:
        error: error_name
        error_description: A description of what caused the error
