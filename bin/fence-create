#!/usr/bin/env python

import argparse
import os
import sys

from fence.scripting.fence_create import (
    create_client_action,
    create_sample_data,
    delete_client_action,
    delete_users,
    google_init,
    sync_dbgap,
    remove_expired_google_service_account_keys,
)


def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--path',
        default='/var/www/fence/',
        help='path to find local_settings.py',
    )

    subparsers = parser.add_subparsers(title='action', dest='action')

    create = subparsers.add_parser('create')
    create.add_argument('yaml-input')

    client_create = subparsers.add_parser('client-create')
    client_create.add_argument('--client', required=True)
    client_create.add_argument('--urls', required=True)
    client_create.add_argument(
        '--username',
        help='user(can represent an organization) that owns the client',
        required=True)
    client_create.add_argument(
        '--external',
        help='is this an external oidc client',
        action="store_true", default=False
    )

    client_delete = subparsers.add_parser('client-delete')
    client_delete.add_argument('--client', required=True)

    user_delete = subparsers.add_parser('user-delete')
    user_delete.add_argument('--users', required=True, nargs='+')

    hmac_create = subparsers.add_parser('hmac-create')
    hmac_create.add_argument('yaml-input')

    dbgap_sync = subparsers.add_parser('sync-dbgap')
    dbgap_sync.add_argument('--projects', required=True)

    manage_google_keys = subparsers.add_parser('google-manage-keys')

    init_google = subparsers.add_parser('google-init')

    return parser.parse_args()


def main():
    args = parse_arguments()

    # get database information
    sys.path.append(args.path)

    if os.environ.get('FENCE_DB'):
        DB = os.environ['FENCE_DB']
    else:
        from fence.settings import DB

    if args.action == 'create':
        yaml_input = args.__dict__['yaml-input']
        create_sample_data(DB, yaml_input)
    elif args.action == 'client-create':
        create_client_action(
            DB, username=args.username, client=args.client,
            urls=args.urls, auto_approve=(not args.external)
        )
    elif args.action == 'client-delete':
        delete_client_action(DB, args.client)
    elif args.action == 'user-delete':
        delete_users(DB, args.users)
    elif args.action == 'sync-dbgap':
        sync_dbgap(args.__dict__['projects'])
    elif args.action == 'google-manage-keys':
        remove_expired_google_service_account_keys(DB)
    elif args.action == 'google-init':
        google_init(DB)


if __name__ == '__main__':
    main()
