# Example snippets for using Kubernetes Secrets with Fence

# Option A: Mount a secret as a file (default mode: mount)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fence
spec:
  template:
    spec:
      containers:
        - name: fence
          env:
            - name: FENCE_K8S_SECRET_MODE
              value: "mount"
          volumeMounts:
            - name: fence-creds
              mountPath: /var/run/secrets/fence
              readOnly: true
      volumes:
        - name: fence-creds
          secret:
            secretName: fence-minio-dev
---
# Option B: API mode with RBAC allowing get on a specific Secret
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: fence-secret-reader
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["fence-minio-dev"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: fence-secret-reader-binding
  namespace: {{ .Release.Namespace }}
subjects:
  - kind: ServiceAccount
    name: fence
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: fence-secret-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fence
spec:
  template:
    spec:
      containers:
        - name: fence
          env:
            - name: FENCE_K8S_SECRET_MODE
              value: "api"
            - name: FENCE_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
