swagger: '2.0'
info:
  title: Fence OpenAPI Specification
  version: 0.1.0
  description: >-
    Access management for CDIS data commons. Code is available on
    [GitHub](https://github.com/uc-cdis/fence).
  termsOfService: 'http://cdis.uchicago.edu/terms/'
  contact:
    email: cdis@uchicago.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: example.domain
basePath: /
tags:
  - name: oauth2
    description: Authorization and token management
  - name: user
    description: User information
  - name: data
    description: Generate pre-signed URLs
  - name: link
    description: Link access identities
  - name: keys
    description: Get public keys used to validate JWTs issued by fence
schemes:
  - https
securityDefinitions:
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: '/oauth/authorize'
    tokenUrl: '/oauth/token'
    scopes:
      user: generic user access
paths:
  '/oauth2/authorize':
    get:
      tags:
        - oauth2
      summary: Perform OAuth2 authorization
      description: >-
        Obtain an authorization grant through the OAuth2 protocol. To handle
        this request, render a page for the user to confirm the OAuth2 grant
        (through e.g. Google). Redirect user to `redirect_uri` with an added
        `code` parameter obtained from the authorization provider.
      operationId: authorize
      produces:
        - application/json
      parameters:
        - name: client_id
          required: true
          type: string
          in: query
          description: The client's ID, issued by authorization server
        - name: response_type
          required: true
          type: string
          in: query
          description: >-
            For an authorization request using the access code flow, the
            response type must be "code". If this is missing from the request
            then the authorization server must return an error.
        - name: redirect_uri
          required: true
          type: string
          in: query
          description: Page to redirect to after access has been granted
        - name: scope
          required: false
          type: string
          in: query
          description: Requested authorization scope
      responses:
        '200':
          description: successful operation
    post:
      tags:
        - oauth2
      summary: Perform OAuth2 authorization
      description: >-
        Obtain an authorization grant through the OAuth2 protocol. To handle
        this request, render a page for the user to confirm the OAuth2 grant
        (through e.g. Google). Redirect user to `redirect_uri` with an added
        `code` parameter obtained from the authorization provider. A POST will
        not render a page for the user; this implementation checks the `confirm`
        value in the request.
      operationId: authorize_post
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: client_id
          required: true
          type: string
          in: formData
          description: The client's ID, issued by authorization server
        - name: response_type
          required: true
          type: string
          enum: [code, token]
          in: formData
          description: >-
            For an authorization request using the access code flow, the
            response type must be "code". If this is missing from the request
            then the authorization server must return an error.
        - name: redirect_uri
          required: true
          type: string
          in: formData
          description: Page to redirect to after access has been granted
        - name: confirm
          required: false
          type: string
          in: formData
          description: whether to confirm the OAuth2 grant (should be 'yes')
        - name: scope
          required: false
          type: string
          in: formData
          description: Requested authorization scope
      responses:
        '200':
          description: successful operation
  '/oauth2/token':
    post:
      tags:
        - oauth2
      summary: Exchange code for or refresh the access token.
      description: >-
        Exchange the `code` obtained from OAuth2 for an access token, or refresh
        the access token using a refresh token.
      operationId: token
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: grant_type
          required: true
          type: string
          in: formData
          description: >-
            Value MUST be `"authorization_code"` (which is the authorization
            flow used in this implementation)
        - name: code
          required: true
          type: string
          in: formData
          description: The authorization code returned from the OAuth2 authorization request
        - name: redirect_uri
          required: true
          type: string
          in: formData
          description: >-
            Must be identical to the `"redirect_uri"` included in the original
            authorization request
        - name: client_id
          required: true
          type: string
          in: formData
      responses:
        '200':
          description: successful operation
  '/oauth2/revoke':
    post:
      tags:
        - oauth2
      summary: Revoke a refresh token
      description: Revoke a refresh (not access) token granted to a user.
      operationId: revoke
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: token
          required: true
          type: string
          in: formData
          description: Refresh token that the user wants to revoke
      responses:
        '200':
          description: successful operation, OR invalid token submitted
        '400':
          description: 'invalid token provided: not a refresh token, or token was missing a claim, or token could not be validated'
  '/jwt/keys':
    get:
      tags:
        - keys
      summary: Return the public keys which can be used to validate JWTs issued and signed by fence
      operationId: getKeys
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": '#/definitions/PublicKeys'
  '/user':
    get:
      tags:
        - user
      summary: Return info about the current user
      security:
        - OAuth2: [user]
      operationId: getUserInfo
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": '#/definitions/UserInfo'
  '/data/{uuid}':
    get:
      tags:
        - data
      summary: Create a presigned URL for data
      description: >-
        Allow users to get a pre-signed URL given the location of preference.
      security:
        - OAuth2: [user]
      operationId: getPresignedURL
      parameters:
        - name: uuid
          required: true
          type: string
          in: path
          description: data UUID
        - name: location
          required: true
          type: string
        - name: protocol
          required: false
          type: string
          in: query
          description: a protocol provided by storage provider, currently supports 'http' and 's3' protocols
          enum: [http, s3]
        - name: expires_in
          required: false
          type: int
          in: query
          description: the time (in seconds) in which return url is valid. Default 1800, maximum is 86400
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": '#/definitions/PresignedURL'
        '400':
          description: 'Invalid input: UUID not found or invalid location'
  '/data/upload/{file_id}':
    get:
      tags:
        - data
      summary: Create a presigned URL for data specified by file_id
      description: >-
        Allow users to get a pre-signed URL to upload data given the location of preference.
      security:
        - OAuth2: [user]
      operationId: getPresignedURL
      parameters:
        - name: file_id
          required: true
          type: string
          in: path
          description: data UUID
        - name: protocol
          required: false
          type: string
          in: query
          description: a protocol provided by storage provider, currently supports 'http' and 's3' protocols
          enum: [http, s3]
        - name: expires_in
          required: false
          type: int
          in: query
          description: location (as in cloud provider) to use
          enum: [aws, google]
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": '#/definitions/PresignedURL'
        '400':
          description: 'Invalid input: UUID not found or invalid location'
  '/link/google':
    get:
      tags:
        - link
      summary: Link Google identity
      parameters:
        - name: redirect
          required: true
          type: string
          in: query
          description: Page to redirect to after account linking
      description: >-
        Link a Google identity to a User (AuthN using Google Oauth2 flow). Google identity will be added to a
        proxy group, the proxy group will then be added to project
        specific groups and the Google groups will be given permission to buckets
        using Google IAM. `redirect` will be stored in the session.
      operationId: linkCloudIdentityStart
      responses:
        '302':
          description: redirect to Oauth2 flow with Google to AuthN user
  '/link/google/link':
    get:
      tags:
        - link
      summary: Google's callback for linking Google identity
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: code
          required: true
          type: string
          in: formData
          description: The authorization code returned from the OAuth2 authorization request
      description: >-
        Linking of Google identity to user after successful Oauth2
        flow with Google. Use code to retrieve user info from Google
        and add identity to proxy group.
      operationId: linkCloudIdentity
      responses:
        '302':
          description: redirect to session-stored redirect value
  '/link/google/service_account':
    post:
      tags:
        - link
      summary: Link a Google Service Account
      description: >-
        Link a Google Cloud Project's service account to user to allow access to controlled
        data. If there are issues, will provide details for what went wrong.
      operationId: linkGoogleServiceAccount
      parameters:
        - in: "body"
          name: "body"
          description: "ServiceAccount object to link"
          required: true
          schema:
            $ref: "#/definitions/GoogleServiceAccount"
      responses:
        '200':
          description: success, linked service account
        '400':
          description: failure, trying to link service account resulted in errors
  '/link/google/service_account/_dry_run':
    post:
      tags:
        - link
      summary: Dry run to attempt to link a Google Service Account
      description: >-
        Attempt to link a service account WITHOUT actually doing so. Will
        provide detailed errors for what went wrong.
      operationId: linkGoogleServiceAccountDryRun
      parameters:
        - in: "body"
          name: "body"
          description: "ServiceAccount object to link"
          required: true
          schema:
            $ref: "#/definitions/GoogleServiceAccount"
      responses:
        '200':
          description: success, linking service account is possible
        '400':
          description: failure, linking service account would result in errors
  '/.well-known/jwks':
    get:
      tags:
        - keys
      summary: Get JWK Set used by the application
      description: >-
        See [RFC 7517](https://tools.ietf.org/html/rfc7517) for detailed specification and an [example
        response](https://tools.ietf.org/html/rfc7517#appendix-A.1).
      responses:
        200:
          description: JWKS response
          schema:
            "$ref": '#/definitions/JWKS'
definitions:
  GoogleServiceAccount:
    type: object
    required: [email, google-project-id, projects]
    properties:
        email:
          type: string
          description: Service account's email
        google-project-id:
          type: string
          description: Google Cloud Project ID of service account
        projects:
          type: array
          items:
            type: string
          description: List of projects/datasets for which service account should be registered for
  JWKS:
    type: object
    properties:
      keys:
        type: array
        description: array of dictionaries of key information
        items:
          type: object
          properties:
            kty:
              type: string
              description: key type ("RSA" in our implementation)
            alg:
              type: string
              description: algorithm ("RS256" in our implementation)
            n:
              type: string
              description: base64-encoded public key modulus
            e:
              type: string
              description: base64-encoded public key exponent
            kid:
              type: string
              description: key ID
    example:
      keys:
        - kty: "RSA"
          n: 0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw
          e: "AQAB"
          alg: "RS256"
          kid: "2011-04-29"
  UserInfo:
    type: object
    required: [pdc_id, username, resources_granted, project_access, certificates_uploaded, email, message]
    properties:
      pdc_id:
        type: string
      username:
        type: string
        description: ''
      resources_granted:
        type: array
        items:
          type: string
      project_access:
        type: object
        additionalProperties:
          type: string
      certificates_uploaded:
        type: array
        items:
          type: string
      email:
        type: string
        description: ''
      message:
        type: string
  PresignedURL:
    type: object
    properties:
      url:
        type: string
        description: the presigned url issued to
  PublicKeys:
    type: object
    properties:
      keys:
        type: array
        description: array of single-entry dictionaries mapping from key id to public key
        items:
          type: array
          description: "tuple of `(key_id, public_key)`"
          items:
            type: string
    example:
      keys:
        - ["public_key_01", "-----BEGIN PUBLIC KEY----- ... -----END PUBLIC KEY-----"]
  OAuthHTML:
    type: string