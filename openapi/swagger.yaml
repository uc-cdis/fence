swagger: '2.0'
info:
  title: Fence OpenAPI Specification
  version: 0.1.0
  description: >-
    Access management for CDIS data commons. Code is available on
    [GitHub](https://github.com/uc-cdis/fence).
  termsOfService: 'http://cdis.uchicago.edu/terms/'
  contact:
    email: cdis@uchicago.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: example.domain
basePath: /
tags:
  - name: oauth2
    description: Authorization and token management
  - name: user
    description: User information
  - name: data
    description: Generate pre-signed URLs
  - name: link
    description: Link access identities
  - name: keys
    description: Get public keys used to validate JWTs issued by fence
schemes:
  - https
securityDefinitions:
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: '/oauth/authorize'
    tokenUrl: '/oauth/token'
    scopes:
      user: generic user access
paths:
  "/login/shib":
    get:
      tags:
      - login-controller
      summary: redirection for SSO on shibboleth
      operationId: login_from_shibboleth
      consumes:
      - application/json
      produces:
      - "*/*"
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/login/google":
    get:
      tags:
      - login-controller
      summary: redirection for google sign in
      operationId: redirect_to_google
      consumes:
      - application/json
      produces:
      - "*/*"
      parameters:
      - name: redirect
        in: headers
        description: url used for redirection
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/login/google/login":
    get:
      tags:
      - login-controller
      summary: redirection for google sign in
      operationId: redirect_to_google
      consumes:
      - application/json
      produces:
      - "*/*"
      parameters:
      - name: code
        in: path
        description: TODO
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/oauth2/authorize":
    get:
      tags:
      - auth-controller
      summary: Handle the first step in the OAuth procedure. Render a confirmation page.
      operationId: authorize
      consumes:
      - "*/*"
      produces:
      - "*/*"
      parameters:
      - name: client_id
        in: header
        description: TODO
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
      - auth-controller
      summary: Handle the first step in the OAuth procedure. check that the value of ``confirm`` in the form data is exactly ``"yes"``
      operationId: authorize
      consumes:
      - "*/*"
      produces:
      - "*/*"
      parameters:
      - name: confirm
        in: formData
        description: TODO
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/oauth2/token":
    post:
      tags:
      - auth-controller
      summary: Handle exchanging code for and refreshing the access token.
      operationId: get_access_token
      consumes:
      - application/json
      produces:
      - "*/*"
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/oauth2/revoke":
    post:
      tags:
      - auth-controller
      summary: Revoke a refresh token.
      operationId: revoke_token
      consumes:
      - application/json
      produces:
      - "*/*"
      parameters:
      - name: token
        in: formData
        description: TODO
        required: true
        type: string
      responses:
        '204':
          description: OK
          schema:
            type: string
        '400':
          description: no token provided
  "/oauth2/errors":
    get:
      tags:
      - auth-controller
      summary: Define the errors endpoint for the OAuth provider.
      operationId: revoke_token
      consumes:
      - "*/*"
      produces:
      - "*/*"
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/credentials":
    get:
      tags:
      - storage-controller
      summary: List different resources user can have credentials
      operationId: list_sources
      consumes:
      - "*/*"
      produces:
      - application/json
      responses:
        '204':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/credentials/{backend}":
    get:
      tags:
      - storage-controller
      summary: List all existing credentials (keypairs/tokens) for user
      operationId: list_credentials
      consumes:
      - "*/*"
      produces:
      - application/json
      parameters:
      - name: backend
        in: path
        description: TODO
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
      - storage-controller
      summary: Generate a credential (keypair/token) for user
      operationId: create_credentials
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: backend
        in: path
        description: TODO
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
      - storage-controller
      summary: Refresh token for user
      operationId: create_access_token_api
      consumes:
      - "*/*"
      produces:
      - application/json
      parameters:
      - name: backend
        in: path
        description: TODO
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/credentials/{backend}/{access_key}":
    delete:
      tags:
      - storage-controller
      summary: List all existing credentials (keypairs/tokens) for user
      operationId: delete_credential
      consumes:
      - "*/*"
      produces:
      - application/json
      parameters:
      - name: backend
        in: path
        description: TODO
        required: true
        type: string
      - name: access_key
        in: body
        description: TODO
        required: true
        type: string
      responses:
        '201':
          description: Success
          schema:
            type: string
        '404':
          description: Key Doesn't Exist
  "/user/cert":
    put:
      tags:
      - user-controller
      summary: TODO
      operationId: missing_certificate
      consumes:
      - "*/*"
      produces:
      - application/json
      responses:
        '201':
          description: Success
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/user/cert/{certificate}":
    put:
      tags:
      - user-controller
      summary: TODO
      operationId: upload_certificate
      consumes:
      - "*/*"
      produces:
      - application/json
      parameters:
      - name: certificate
        in: path
        description: certificate name
        required: true
        type: string
      - name: extension
        in: headers
        description: TODO
        required: true
        type: string
      responses:
        '201':
          description: Success
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    get:
      tags:
      - user-controller
      summary: TODO
      operationId: download_certificate
      consumes:
      - "*/*"
      produces:
      - application/json
      parameters:
      - name: certificate
        in: path
        description: certificate name
        required: true
        type: string
      responses:
        '201':
          description: Success
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "data/{uuid}":
    get:
      tags:
        - data
      summary: Create a presigned URL for data
      description: >-
        Allow users to get a pre-signed URL given the location of preference.
      security:
        - OAuth2: [user]
      operationId: getPresignedURL
      parameters:
        - name: uuid
          required: true
          type: string
          in: path
          description: data UUID
        - name: location
          required: true
          type: string
        - name: protocol
          required: false
          type: string
          in: query
          description: a protocol provided by storage provider, currently supports 'http' and 's3' protocols
          enum: [http, s3]
        - name: expires_in
          required: false
          type: int
          in: query
          description: the time (in seconds) in which return url is valid. Default 1800, maximum is 86400
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": '#/definitions/PresignedURL'
        '400':
          description: 'Invalid input: UUID not found or invalid location'
  "/data/upload/{file_id}":
    get:
      tags:
        - data
      summary: Create a presigned URL for data specified by file_id
      description: >-
        Allow users to get a pre-signed URL to upload data given the location of preference.
      security:
        - OAuth2: [user]
      operationId: getPresignedURL
      parameters:
        - name: file_id
          required: true
          type: string
          in: path
          description: data UUID
        - name: protocol
          required: false
          type: string
          in: query
          description: a protocol provided by storage provider, currently supports 'http' and 's3' protocols
          enum: [http, s3]
        - name: expires_in
          required: false
          type: int
          in: query
          description: location (as in cloud provider) to use
          enum: [aws, google]
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": '#/definitions/PresignedURL'
        '400':
          description: 'Invalid input: UUID not found or invalid location'
  "/admin/groups/{groupname}":
    get:
      tags:
      - group-controller
      summary: getGroup
      operationId: get_group
      consumes:
      - application/json
      produces:
      - "*/*"
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - name: groupname
        in: path
        description: name of the groupd
        required: true
        type: string
      responses:
        '200':
          description: Group Details
          schema:
            "$ref": "#/definitions/Group"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
      - group-controller
      summary: deleteGroup
      operationId: delete_group
      consumes:
      - application/json
      produces:
      - "*/*"
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - name: groupname
        in: path
        description: name of the groupd
        required: true
        type: string
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  "/admin/groups/{groupname}/projects":
    delete:
      tags:
      - group-controller
      summary: deleteGroupsProjects
      operationId: delete_groups_projects
      consumes:
      - application/json
      produces:
      - "*/*"
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - name: groupname
        in: path
        description: name of the group you are removing the projects from
        required: true
        type: string
      - in: body
        name: projects
        description: list of project names to remove to this group
        required: true
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
      - group-controller
      summary: addAppsToGroups
      operationId: add_projects_to_groups
      consumes:
      - application/json
      produces:
      - "*/*"
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - name: groupname
        in: path
        description: groupname of the group we want to add projects to
        required: true
        type: string
      - in: body
        name: projects
        description: list of project names to add to this group
        required: true
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: Add Projects to Group
          schema:
            type: string
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/admin/groups/{groupname}/users":
    get:
      tags:
      - group-controller
      summary: getGroupsUsers
      operationId: get_groups_users
      consumes:
      - application/json
      produces:
      - "*/*"
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - name: groupname
        in: path
        description: groupname of the group from which we want to get the users
        required: true
        type: string
      responses:
        '200':
          description: Page of users of group
          schema:
            "$ref": "#/definitions/GroupUsers"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/admin/groups":
    get:
      tags:
      - group-controller
      summary: getGroupsList
      operationId: get_groups_list
      consumes:
      - application/json
      produces:
      - "*/*"
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      responses:
        '200':
          description: Page of groups
          schema:
            "$ref": "#/definitions/PageDTO"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
      - group-controller
      summary: createGroup
      operationId: create_group
      consumes:
      - application/json
      produces:
      - "*/*"
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - in: body
        name: name
        description: group name
        required: true
        schema:
          "$ref": "#/definitions/Group"
      responses:
        '200':
          description: New Group
          schema:
            "$ref": "#/definitions/Group"
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/admin/projects/{projectname}/groups":
    put:
      tags:
      - admin-controller
      summary: add project to multiple groups
      operationId: add_project_to_groups
      consumes:
      - "*.*"
      produces:
      - application/json
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - name: projectname
        in: path
        description: name of the project that we want to add
        required: true
        type: string
      - name: groups
        in: path
        description: list of groups we want to add the project to
        required: true
        type: list
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/ProjectInfo"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
      - admin-controller
      summary: remove projects from a set of groups
      operationId: remove_project_from_groups
      consumes:
      - "*.*"
      produces:
      - application/json
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - name: projectname
        in: path
        description: name of the project that we want to remove
        required: true
        type: string
      - name: groups
        in: path
        description: list of groups we want to remove the project from
        required: true
        type: list
  "/admin/projects/{projectname}":
    get:
      tags:
      - admin-controller
      summary: get project information from given a username
      operationId: get_project
      consumes:
      - "*.*"
      produces:
      - application/json
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - name: projectname
        in: path
        description: name of the project whose info we want to retrieve
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/ProjectInfo"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
      - admin-controller
      summary: create or update a project
      operationId: create_project
      consumes:
      - "*.*"
      produces:
      - application/json
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - name: projectname
        in: path
        description: name of the project we want to create or update
        required: true
        type: string
      - name: auth_id
        in: body
        description: unique identifier of the project from the cloud provider (i.e. dbgap)
        required: true
        type: string
      - name: storage_access
        in: body
        description: backend system to be used for buckets in the object store
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
      - admin-controller
      summary: delete project information from given a username
      operationId: delete_project
      consumes:
      - "*.*"
      produces:
      - application/json
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - name: projectname
        in: path
        description: name of the project whose info we want to delete
        required: true
        type: string
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/admin/user":
    get:
      tags:
      - user-controller
      summary: Get all users from the database
      operationId: get_all_users
      consumes:
      - "*/*"
      produces:
      - application/json
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      responses:
        '201':
          description: Success
          schema:
            type: list
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/admin/user/{username}/groups":
    delete:
      tags:
      - user-controller
      summary: remove user from certain groups
      operationId: remove_user_from_groups
      consumes:
      - "*/*"
      produces:
      - application/json
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - name: username
        in: path
        description: name of the user we want to remove
        required: true
        type: list
      - name: groups
        in: body
        description: list of groups to remove the user from
        required: true
        type: list
      responses:
        '201':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    get:
      tags:
      - user-controller
      summary: get the list of groups the user belongs to
      operationId: get_user_groups
      consumes:
      - "*/*"
      produces:
      - application/json
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - name: username
        in: path
        description: name of the user we want to get the groups from
        required: true
        type: list
      responses:
        '201':
          description: Success
          schema:
            type: list
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
      - user-controller
      summary: add user to certain groups
      operationId: add_user_to_groups
      consumes:
      - "*/*"
      produces:
      - application/json
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - name: username
        in: path
        description: name of the user we want to add
        required: true
        type: list
      - name: groups
        in: body
        description: list of groups to add the user to
        required: true
        type: list
      responses:
        '201':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/admin/user/{username}/projects":
    delete:
      tags:
      - user-controller
      summary: remove user from certain projects
      operationId: remove_user_from_projects
      consumes:
      - "*/*"
      produces:
      - application/json
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - name: username
        in: path
        description: name of the user we want to remove
        required: true
        type: list
      - name: projects
        in: body
        description: list of projects to remove the user from
        required: true
        type: list
      responses:
        '201':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
      - user-controller
      summary: add user to certain projects
      operationId: add_user_to_projects
      consumes:
      - "*/*"
      produces:
      - application/json
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - name: username
        in: path
        description: name of the user we want to add
        required: true
        type: list
      - name: groups
        in: body
        description: list of project to add the user to
        required: true
        type: list
      responses:
        '201':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/admin/user/{username}":
    get:
      tags:
      - admin-controller
      summary: get user information from given a username
      operationId: get_user
      consumes:
      - "*.*"
      produces:
      - application/json
      parameters:
      - name: persistent_id
        in: header
        description: User name making the request, populated by apache shibboleth mod from the token it receives
        required: true
        type: string
      - name: username
        in: path
        description: username of the user whose info we want to retrieve
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
      - admin-controller
      summary: create or update user information for given a username
      operationId: create_user
      consumes:
      - application/json
      produces:
      - "*/*"
      parameters:
      - name: username
        in: path
        description: username of the user that we want to create or update
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
      - admin-controller
      summary: delete user information for given a username
      operationId: delete_user
      consumes:
      - application/json
      produces:
      - "*/*"
      parameters:
      - name: username
        in: path
        description: username of the user that we want to delete
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
definitions:
    Group:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    GroupUsers:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        users:
            type: list
    GroupProjects:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: stringlist
        projects:
          type: list
    User:
      type: object
      properties:
        createdAt:
          type: string
        email:
          type: string
        firstName:
          type: string
        id:
          type: integer
          format: int32
        lastLogin:
          type: string
        lastName:
          type: string
        name:
          type: string
        preferredLanguage:
          type: string
        role:
          type: string
        status:
          type: string
    Project:
      type: object
      properties:
        parent_id:
          type: string
        description:
          type: string
        id:
          type: integer
          format: int32
        name:
          type: string
        auth_id:
          type: string
    ProjectInfo:
        type: object
        properties:
          associated bueckets:
            type: list
          auth_id:
            type: string
          description:
            type: string
          id:
            type: integer
            format: int32
          name:
            type: string
    UserInfo:
      type: object
      required: [pdc_id, username, resources_granted, project_access, certificates_uploaded, email, message]
      properties:
        pdc_id:
          type: string
        username:
          type: string
          description: ''
        resources_granted:
          type: array
          items:
            type: string
        project_access:
          type: object
          additionalProperties:
            type: string
        certificates_uploaded:
          type: array
          items:
            type: string
        email:
          type: string
          description: ''
        message:
          type: string
    PresignedURL:
      type: object
      properties:
        url:
          type: string
          description: the presigned url issued to
    PublicKeys:
      type: object
      properties:
        keys:
          type: array
          description: array of single-entry dictionaries mapping from key id to public key
          items:
            type: array
            description: "tuple of `(key_id, public_key)`"
            items:
              type: string
      example:
        keys:
          - ["public_key_01", "-----BEGIN PUBLIC KEY----- ... -----END PUBLIC KEY-----"]
    OAuthHTML:
      type: string
